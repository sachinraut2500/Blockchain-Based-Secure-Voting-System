# -*- coding: utf-8 -*-
"""Blockchain-Based Secure Voting System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o3OR4VeCzokBLLmhDBl_dThg6i_3XQrR
"""

---

## **Project 3: Blockchain-Based Secure Voting System**

**Single-file Python Code: `secure_voting_system.py`**

```python
import hashlib
import json
from datetime import datetime

class Block:
    def __init__(self, index, timestamp, data, previous_hash=''):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.nonce = 0
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        value = f"{self.index}{self.timestamp}{json.dumps(self.data)}{self.previous_hash}{self.nonce}"
        return hashlib.sha256(value.encode()).hexdigest()

    def mine_block(self, difficulty):
        while self.hash[:difficulty] != '0'*difficulty:
            self.nonce += 1
            self.hash = self.calculate_hash()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 2

    def create_genesis_block(self):
        return Block(0, str(datetime.now()), "Genesis Block", "0")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.mine_block(self.difficulty)
        self.chain.append(new_block)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current = self.chain[i]
            prev = self.chain[i-1]
            if current.hash != current.calculate_hash() or current.previous_hash != prev.hash:
                return False
        return True

# Example usage
if __name__ == "__main__":
    voting_blockchain = Blockchain()
    print("Casting vote: Alice -> Candidate1")
    voting_blockchain.add_block(Block(1, str(datetime.now()), {"voter": "Alice", "vote": "Candidate1"}))
    print("Casting vote: Bob -> Candidate2")
    voting_blockchain.add_block(Block(2, str(datetime.now()), {"voter": "Bob", "vote": "Candidate2"}))

    for block in voting_blockchain.chain:
        print(vars(block))

    print("Is blockchain valid?", voting_blockchain.is_chain_valid())